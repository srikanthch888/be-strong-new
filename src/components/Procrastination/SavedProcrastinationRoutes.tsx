import React, { useState, useEffect } from 'react'
import { 
  Coffee, Trash2, Calendar, Clock, AlertCircle, Loader2, Search, Filter, 
  CheckCircle, Edit3, Save, X, Eye, Share2, Download, MoreVertical,
  ChevronLeft, ChevronRight, Check
} from 'lucide-react'
import { useAuth } from '../../hooks/useAuth'
import { supabase, SavedProcrastinationRoute, ProcrastinationStep } from '../../lib/supabase'

type SortOption = 'date' | 'title' | 'status' | 'alphabetical'
type FilterOption = 'all' | 'active' | 'completed' | 'archived'

interface RouteModalProps {
  route: SavedProcrastinationRoute | null
  isOpen: boolean
  onClose: () => void
  onUpdate: (route: SavedProcrastinationRoute) => void
  onDelete: (routeId: string) => void
}

function RouteDetailModal({ route, isOpen, onClose, onUpdate, onDelete }: RouteModalProps) {
  const [isEditing, setIsEditing] = useState(false)
  const [editTitle, setEditTitle] = useState('')
  const [editNotes, setEditNotes] = useState('')
  const [loading, setLoading] = useState(false)

  useEffect(() => {
    if (route) {
      setEditTitle(route.title || route.original_task)
      setEditNotes(route.notes || '')
    }
  }, [route])

  if (!isOpen || !route) return null

  const handleSave = async () => {
    setLoading(true)
    try {
      const { error } = await supabase
        .from('saved_procrastination_routes')
        .update({
          title: editTitle.trim() || null,
          notes: editNotes.trim()
        })
        .eq('id', route.id)

      if (error) throw error

      onUpdate({
        ...route,
        title: editTitle.trim() || null,
        notes: editNotes.trim()
      })
      setIsEditing(false)
    } catch (error) {
      console.error('Error updating route:', error)
    } finally {
      setLoading(false)
    }
  }

  const toggleStatus = async () => {
    const newStatus = route.status === 'completed' ? 'active' : 'completed'
    const updates: any = { status: newStatus }
    
    if (newStatus === 'completed') {
      updates.completed_at = new Date().toISOString()
    } else {
      updates.completed_at = null
    }

    try {
      const { error } = await supabase
        .from('saved_procrastination_routes')
        .update(updates)
        .eq('id', route.id)

      if (error) throw error

      onUpdate({
        ...route,
        status: newStatus,
        completed_at: updates.completed_at
      })
    } catch (error) {
      console.error('Error updating status:', error)
    }
  }

  const exportRoute = () => {
    const content = `
PROCRASTINATION ROUTE: ${route.title || route.original_task}
Generated: ${new Date(route.created_at).toLocaleDateString()}
Status: ${route.status}
${route.notes ? `Notes: ${route.notes}` : ''}

ORIGINAL TASK TO AVOID:
${route.original_task}

PROCRASTINATION STEPS:
${route.route_steps.map((step, index) => `
${index + 1}. ${step.name} (${step.timeInvestment})
   ${step.description}
   Benefit: ${step.benefit}
`).join('\n')}

Generated by Strong Strong - The Optimal Procrastination Route Planner
    `.trim()

    const blob = new Blob([content], { type: 'text/plain' })
    const url = URL.createObjectURL(blob)
    const a = document.createElement('a')
    a.href = url
    a.download = `procrastination-route-${route.id.slice(0, 8)}.txt`
    document.body.appendChild(a)
    a.click()
    document.body.removeChild(a)
    URL.revokeObjectURL(url)
  }

  const shareRoute = async () => {
    const shareText = `Check out this procrastination route I created: "${route.title || route.original_task}" - ${route.route_steps.length} perfectly crafted steps to avoid getting things done! ðŸ˜„`
    
    if (navigator.share) {
      try {
        await navigator.share({
          title: 'My Procrastination Route',
          text: shareText
        })
      } catch (error) {
        // Fallback to clipboard
        navigator.clipboard.writeText(shareText)
        alert('Route copied to clipboard!')
      }
    } else {
      navigator.clipboard.writeText(shareText)
      alert('Route copied to clipboard!')
    }
  }

  return (
    <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4">
      <div className="bg-white rounded-2xl shadow-2xl w-full max-w-4xl max-h-[90vh] overflow-y-auto">
        <div className="p-6">
          {/* Header */}
          <div className="flex items-start justify-between mb-6">
            <div className="flex-1">
              {isEditing ? (
                <input
                  value={editTitle}
                  onChange={(e) => setEditTitle(e.target.value)}
                  className="text-2xl font-bold text-gray-900 w-full p-2 border border-gray-300 rounded-lg"
                  placeholder="Route title..."
                />
              ) : (
                <h2 className="text-2xl font-bold text-gray-900">
                  {route.title || route.original_task}
                </h2>
              )}
              <div className="flex items-center space-x-4 mt-2 text-sm text-gray-500">
                <div className="flex items-center space-x-1">
                  <Calendar className="w-4 h-4" />
                  <span>Created {new Date(route.created_at).toLocaleDateString()}</span>
                </div>
                {route.completed_at && (
                  <div className="flex items-center space-x-1">
                    <CheckCircle className="w-4 h-4" />
                    <span>Completed {new Date(route.completed_at).toLocaleDateString()}</span>
                  </div>
                )}
              </div>
            </div>
            <div className="flex items-center space-x-2">
              <button
                onClick={toggleStatus}
                className={`p-2 rounded-full transition-colors ${
                  route.status === 'completed'
                    ? 'bg-green-100 text-green-600'
                    : 'bg-gray-100 hover:bg-green-100 text-gray-600 hover:text-green-600'
                }`}
              >
                <CheckCircle className="w-5 h-5" />
              </button>
              <button
                onClick={() => setIsEditing(!isEditing)}
                className="p-2 bg-gray-100 hover:bg-gray-200 text-gray-600 rounded-full transition-colors"
              >
                <Edit3 className="w-5 h-5" />
              </button>
              <button
                onClick={shareRoute}
                className="p-2 bg-gray-100 hover:bg-gray-200 text-gray-600 rounded-full transition-colors"
              >
                <Share2 className="w-5 h-5" />
              </button>
              <button
                onClick={exportRoute}
                className="p-2 bg-gray-100 hover:bg-gray-200 text-gray-600 rounded-full transition-colors"
              >
                <Download className="w-5 h-5" />
              </button>
              <button
                onClick={onClose}
                className="p-2 hover:bg-gray-100 rounded-full transition-colors"
              >
                <X className="w-5 h-5" />
              </button>
            </div>
          </div>

          {/* Original Task */}
          <div className="mb-6 p-4 bg-purple-50 rounded-xl">
            <h3 className="font-semibold text-purple-900 mb-2">Original Task to Avoid:</h3>
            <p className="text-purple-700">{route.original_task}</p>
          </div>

          {/* Notes */}
          <div className="mb-6">
            <label className="block text-sm font-medium text-gray-700 mb-2">Notes</label>
            {isEditing ? (
              <textarea
                value={editNotes}
                onChange={(e) => setEditNotes(e.target.value)}
                rows={3}
                className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                placeholder="Add your thoughts about this route..."
              />
            ) : (
              <p className="text-gray-600 bg-gray-50 p-3 rounded-lg">
                {route.notes || 'No notes added yet.'}
              </p>
            )}
          </div>

          {/* Action Buttons */}
          {isEditing && (
            <div className="flex space-x-3 mb-6">
              <button
                onClick={handleSave}
                disabled={loading}
                className="flex items-center space-x-2 px-4 py-2 bg-green-600 hover:bg-green-700 disabled:bg-gray-400 text-white rounded-lg transition-colors"
              >
                {loading ? <Loader2 className="w-4 h-4 animate-spin" /> : <Save className="w-4 h-4" />}
                <span>Save Changes</span>
              </button>
              <button
                onClick={() => setIsEditing(false)}
                className="flex items-center space-x-2 px-4 py-2 bg-gray-600 hover:bg-gray-700 text-white rounded-lg transition-colors"
              >
                <X className="w-4 h-4" />
                <span>Cancel</span>
              </button>
            </div>
          )}

          {/* Route Steps */}
          <div className="space-y-4">
            <h3 className="text-lg font-semibold text-gray-900">Procrastination Steps</h3>
            {route.route_steps.map((step, index) => (
              <div key={index} className="border border-gray-200 rounded-xl p-4">
                <div className="flex items-start space-x-3">
                  <div className="bg-purple-100 text-purple-600 w-8 h-8 rounded-full flex items-center justify-center font-bold">
                    {index + 1}
                  </div>
                  <div className="flex-1">
                    <div className="flex items-center space-x-2 mb-2">
                      <h4 className="font-semibold text-gray-900">{step.name}</h4>
                      <span className="text-xs bg-purple-100 text-purple-600 px-2 py-1 rounded-full">
                        {step.timeInvestment}
                      </span>
                    </div>
                    <p className="text-gray-700 mb-2">{step.description}</p>
                    <p className="text-purple-700 font-medium text-sm">
                      <span className="font-bold">Benefit:</span> {step.benefit}
                    </p>
                  </div>
                </div>
              </div>
            ))}
          </div>
        </div>
      </div>
    </div>
  )
}

export function SavedProcrastinationRoutes() {
  const { user } = useAuth()
  const [savedRoutes, setSavedRoutes] = useState<SavedProcrastinationRoute[]>([])
  const [filteredRoutes, setFilteredRoutes] = useState<SavedProcrastinationRoute[]>([])
  const [loading, setLoading] = useState(true)
  const [deleteLoading, setDeleteLoading] = useState<string | null>(null)
  const [message, setMessage] = useState('')
  
  // Filters and sorting
  const [searchTerm, setSearchTerm] = useState('')
  const [sortBy, setSortBy] = useState<SortOption>('date')
  const [filterBy, setFilterBy] = useState<FilterOption>('all')
  const [selectedRoutes, setSelectedRoutes] = useState<Set<string>>(new Set())
  
  // Pagination
  const [currentPage, setCurrentPage] = useState(1)
  const itemsPerPage = 10
  
  // Modal
  const [selectedRoute, setSelectedRoute] = useState<SavedProcrastinationRoute | null>(null)
  const [showModal, setShowModal] = useState(false)

  useEffect(() => {
    if (user) {
      fetchSavedRoutes()
    }
  }, [user])

  useEffect(() => {
    applyFiltersAndSort()
  }, [savedRoutes, searchTerm, sortBy, filterBy])

  const fetchSavedRoutes = async () => {
    if (!user) return

    try {
      const { data, error } = await supabase
        .from('saved_procrastination_routes')
        .select('*')
        .eq('user_id', user.id)
        .eq('is_active', true)
        .order('created_at', { ascending: false })

      if (error) throw error
      setSavedRoutes(data || [])
    } catch (error) {
      console.error('Error fetching saved routes:', error)
      setMessage('Failed to load saved routes.')
    } finally {
      setLoading(false)
    }
  }

  const applyFiltersAndSort = () => {
    let filtered = [...savedRoutes]

    // Apply search filter
    if (searchTerm) {
      filtered = filtered.filter(route =>
        route.original_task.toLowerCase().includes(searchTerm.toLowerCase()) ||
        (route.title && route.title.toLowerCase().includes(searchTerm.toLowerCase())) ||
        (route.notes && route.notes.toLowerCase().includes(searchTerm.toLowerCase()))
      )
    }

    // Apply status filter
    if (filterBy !== 'all') {
      filtered = filtered.filter(route => route.status === filterBy)
    }

    // Apply sorting
    filtered.sort((a, b) => {
      switch (sortBy) {
        case 'date':
          return new Date(b.created_at).getTime() - new Date(a.created_at).getTime()
        case 'title':
          const aTitle = a.title || a.original_task
          const bTitle = b.title || b.original_task
          return aTitle.localeCompare(bTitle)
        case 'alphabetical':
          return a.original_task.localeCompare(b.original_task)
        case 'status':
          return a.status.localeCompare(b.status)
        default:
          return 0
      }
    })

    setFilteredRoutes(filtered)
    setCurrentPage(1) // Reset to first page when filters change
  }

  const deleteRoute = async (routeId: string) => {
    if (!window.confirm('Are you sure you want to delete this procrastination route?')) {
      return
    }

    setDeleteLoading(routeId)
    try {
      const { error } = await supabase
        .from('saved_procrastination_routes')
        .update({ is_active: false })
        .eq('id', routeId)

      if (error) throw error

      setSavedRoutes(prev => prev.filter(route => route.id !== routeId))
      setSelectedRoutes(prev => {
        const newSet = new Set(prev)
        newSet.delete(routeId)
        return newSet
      })
      setMessage('Route deleted successfully.')
    } catch (error) {
      console.error('Error deleting route:', error)
      setMessage('Failed to delete route.')
    } finally {
      setDeleteLoading(null)
    }
  }

  const bulkDelete = async () => {
    if (selectedRoutes.size === 0) return
    
    if (!window.confirm(`Are you sure you want to delete ${selectedRoutes.size} selected routes?`)) {
      return
    }

    try {
      const { error } = await supabase
        .from('saved_procrastination_routes')
        .update({ is_active: false })
        .in('id', Array.from(selectedRoutes))

      if (error) throw error

      setSavedRoutes(prev => prev.filter(route => !selectedRoutes.has(route.id)))
      setSelectedRoutes(new Set())
      setMessage(`${selectedRoutes.size} routes deleted successfully.`)
    } catch (error) {
      console.error('Error bulk deleting routes:', error)
      setMessage('Failed to delete selected routes.')
    }
  }

  const toggleRouteSelection = (routeId: string) => {
    setSelectedRoutes(prev => {
      const newSet = new Set(prev)
      if (newSet.has(routeId)) {
        newSet.delete(routeId)
      } else {
        newSet.add(routeId)
      }
      return newSet
    })
  }

  const toggleSelectAll = () => {
    const currentPageRoutes = getCurrentPageRoutes().map(route => route.id)
    const allSelected = currentPageRoutes.every(id => selectedRoutes.has(id))
    
    setSelectedRoutes(prev => {
      const newSet = new Set(prev)
      if (allSelected) {
        currentPageRoutes.forEach(id => newSet.delete(id))
      } else {
        currentPageRoutes.forEach(id => newSet.add(id))
      }
      return newSet
    })
  }

  const getCurrentPageRoutes = () => {
    const startIndex = (currentPage - 1) * itemsPerPage
    const endIndex = startIndex + itemsPerPage
    return filteredRoutes.slice(startIndex, endIndex)
  }

  const totalPages = Math.ceil(filteredRoutes.length / itemsPerPage)

  const handleRouteUpdate = (updatedRoute: SavedProcrastinationRoute) => {
    setSavedRoutes(prev => prev.map(route => 
      route.id === updatedRoute.id ? updatedRoute : route
    ))
  }

  const openRouteModal = (route: SavedProcrastinationRoute) => {
    setSelectedRoute(route)
    setShowModal(true)
  }

  if (!user) {
    return (
      <div className="max-w-6xl mx-auto p-6">
        <div className="text-center py-12">
          <Coffee className="w-16 h-16 text-gray-400 mx-auto mb-4" />
          <h2 className="text-2xl font-bold text-gray-900 mb-2">Sign In Required</h2>
          <p className="text-gray-600">Please sign in to view your saved procrastination routes.</p>
        </div>
      </div>
    )
  }

  if (loading) {
    return (
      <div className="max-w-6xl mx-auto p-6">
        <div className="flex items-center justify-center h-64">
          <div className="text-center">
            <Loader2 className="w-8 h-8 animate-spin text-purple-600 mx-auto mb-4" />
            <p className="text-gray-500">Loading your procrastination routes...</p>
          </div>
        </div>
      </div>
    )
  }

  const currentPageRoutes = getCurrentPageRoutes()

  return (
    <div className="max-w-6xl mx-auto p-6">
      {/* Header */}
      <div className="mb-8">
        <h1 className="text-3xl font-bold text-gray-900 mb-2">My Saved Procrastination Routes</h1>
        <p className="text-gray-600">
          Your collection of {savedRoutes.length} perfectly crafted procrastination strategies
        </p>
      </div>

      {/* Message */}
      {message && (
        <div className={`mb-6 p-4 rounded-xl flex items-center space-x-2 ${
          message.includes('success') || message.includes('deleted')
            ? 'bg-green-50 text-green-700'
            : 'bg-red-50 text-red-700'
        }`}>
          <AlertCircle className="w-5 h-5" />
          <span>{message}</span>
        </div>
      )}

      {savedRoutes.length === 0 ? (
        <div className="text-center py-12">
          <Coffee className="w-16 h-16 text-gray-400 mx-auto mb-4" />
          <h3 className="text-xl font-bold text-gray-900 mb-2">No Saved Routes Yet</h3>
          <p className="text-gray-600">
            Generate some procrastination routes and save them to build your collection!
          </p>
        </div>
      ) : (
        <>
          {/* Controls */}
          <div className="bg-white rounded-2xl shadow-lg p-6 mb-6">
            <div className="flex flex-col lg:flex-row space-y-4 lg:space-y-0 lg:space-x-6">
              {/* Search */}
              <div className="flex-1">
                <div className="relative">
                  <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-gray-400" />
                  <input
                    type="text"
                    placeholder="Search routes, tasks, or notes..."
                    value={searchTerm}
                    onChange={(e) => setSearchTerm(e.target.value)}
                    className="w-full pl-10 pr-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                  />
                </div>
              </div>

              {/* Filter */}
              <div className="flex items-center space-x-2">
                <Filter className="w-5 h-5 text-gray-400" />
                <select
                  value={filterBy}
                  onChange={(e) => setFilterBy(e.target.value as FilterOption)}
                  className="px-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                >
                  <option value="all">All Routes</option>
                  <option value="active">Active</option>
                  <option value="completed">Completed</option>
                  <option value="archived">Archived</option>
                </select>
              </div>

              {/* Sort */}
              <div className="flex items-center space-x-2">
                <span className="text-gray-600">Sort by:</span>
                <select
                  value={sortBy}
                  onChange={(e) => setSortBy(e.target.value as SortOption)}
                  className="px-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                >
                  <option value="date">Date Created</option>
                  <option value="title">Title</option>
                  <option value="alphabetical">Original Task</option>
                  <option value="status">Status</option>
                </select>
              </div>
            </div>

            {/* Bulk Actions */}
            {selectedRoutes.size > 0 && (
              <div className="mt-4 pt-4 border-t border-gray-200">
                <div className="flex items-center justify-between">
                  <span className="text-sm text-gray-600">
                    {selectedRoutes.size} route{selectedRoutes.size > 1 ? 's' : ''} selected
                  </span>
                  <button
                    onClick={bulkDelete}
                    className="flex items-center space-x-2 px-4 py-2 bg-red-600 hover:bg-red-700 text-white rounded-lg transition-colors"
                  >
                    <Trash2 className="w-4 h-4" />
                    <span>Delete Selected</span>
                  </button>
                </div>
              </div>
            )}
          </div>

          {/* Results Info */}
          <div className="flex items-center justify-between mb-6">
            <p className="text-gray-600">
              Showing {Math.min(filteredRoutes.length, itemsPerPage)} of {filteredRoutes.length} routes
            </p>
            <div className="flex items-center space-x-2">
              <input
                type="checkbox"
                checked={getCurrentPageRoutes().length > 0 && getCurrentPageRoutes().every(route => selectedRoutes.has(route.id))}
                onChange={toggleSelectAll}
                className="w-4 h-4 text-purple-600 rounded focus:ring-purple-500"
              />
              <label className="text-sm text-gray-600">Select all on page</label>
            </div>
          </div>

          {/* Routes List */}
          <div className="space-y-4">
            {currentPageRoutes.map((route) => (
              <div key={route.id} className="bg-white rounded-2xl shadow-lg p-6 hover:shadow-xl transition-shadow">
                <div className="flex items-start space-x-4">
                  {/* Checkbox */}
                  <input
                    type="checkbox"
                    checked={selectedRoutes.has(route.id)}
                    onChange={() => toggleRouteSelection(route.id)}
                    className="w-5 h-5 text-purple-600 rounded focus:ring-purple-500 mt-1"
                  />

                  {/* Route Content */}
                  <div className="flex-1">
                    <div className="flex items-start justify-between mb-3">
                      <div className="flex-1">
                        <h3 className="text-xl font-bold text-gray-900 mb-1">
                          {route.title || route.original_task}
                        </h3>
                        {route.title && (
                          <p className="text-gray-600 text-sm">Original task: {route.original_task}</p>
                        )}
                        <div className="flex items-center space-x-4 mt-2 text-sm text-gray-500">
                          <div className="flex items-center space-x-1">
                            <Calendar className="w-4 h-4" />
                            <span>{new Date(route.created_at).toLocaleDateString()}</span>
                          </div>
                          <div className="flex items-center space-x-1">
                            <Clock className="w-4 h-4" />
                            <span>{route.route_steps.length} steps</span>
                          </div>
                          <span className={`px-2 py-1 rounded-full text-xs font-medium ${
                            route.status === 'completed' 
                              ? 'bg-green-100 text-green-800'
                              : route.status === 'archived'
                              ? 'bg-gray-100 text-gray-800'
                              : 'bg-purple-100 text-purple-800'
                          }`}>
                            {route.status}
                          </span>
                        </div>
                      </div>

                      {/* Actions */}
                      <div className="flex items-center space-x-2">
                        <button
                          onClick={() => openRouteModal(route)}
                          className="p-2 text-gray-600 hover:bg-gray-100 rounded-full transition-colors"
                        >
                          <Eye className="w-5 h-5" />
                        </button>
                        <button
                          onClick={() => deleteRoute(route.id)}
                          disabled={deleteLoading === route.id}
                          className="p-2 text-red-600 hover:bg-red-50 rounded-full transition-colors disabled:opacity-50"
                        >
                          {deleteLoading === route.id ? (
                            <Loader2 className="w-5 h-5 animate-spin" />
                          ) : (
                            <Trash2 className="w-5 h-5" />
                          )}
                        </button>
                      </div>
                    </div>

                    {/* Route Preview */}
                    <div className="bg-gray-50 rounded-lg p-4">
                      <p className="text-sm text-gray-600 mb-2">First few steps:</p>
                      <div className="space-y-2">
                        {route.route_steps.slice(0, 2).map((step, index) => (
                          <div key={index} className="flex items-start space-x-2">
                            <span className="bg-purple-100 text-purple-600 w-5 h-5 rounded-full flex items-center justify-center text-xs font-bold">
                              {index + 1}
                            </span>
                            <div className="flex-1">
                              <p className="text-sm font-medium text-gray-900">{step.name}</p>
                              <p className="text-xs text-gray-600 truncate">{step.description}</p>
                            </div>
                          </div>
                        ))}
                        {route.route_steps.length > 2 && (
                          <p className="text-xs text-gray-500 text-center">
                            ...and {route.route_steps.length - 2} more steps
                          </p>
                        )}
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            ))}
          </div>

          {/* Pagination */}
          {totalPages > 1 && (
            <div className="flex items-center justify-center space-x-2 mt-8">
              <button
                onClick={() => setCurrentPage(prev => Math.max(prev - 1, 1))}
                disabled={currentPage === 1}
                className="p-2 text-gray-600 hover:bg-gray-100 rounded-full transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
              >
                <ChevronLeft className="w-5 h-5" />
              </button>
              
              <div className="flex space-x-1">
                {Array.from({ length: totalPages }, (_, i) => i + 1).map(page => (
                  <button
                    key={page}
                    onClick={() => setCurrentPage(page)}
                    className={`w-10 h-10 rounded-full transition-colors ${
                      currentPage === page
                        ? 'bg-purple-600 text-white'
                        : 'text-gray-600 hover:bg-gray-100'
                    }`}
                  >
                    {page}
                  </button>
                ))}
              </div>

              <button
                onClick={() => setCurrentPage(prev => Math.min(prev + 1, totalPages))}
                disabled={currentPage === totalPages}
                className="p-2 text-gray-600 hover:bg-gray-100 rounded-full transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
              >
                <ChevronRight className="w-5 h-5" />
              </button>
            </div>
          )}

          {filteredRoutes.length === 0 && savedRoutes.length > 0 && (
            <div className="text-center py-12">
              <Search className="w-12 h-12 text-gray-400 mx-auto mb-4" />
              <h3 className="text-lg font-medium text-gray-900 mb-2">No routes found</h3>
              <p className="text-gray-600">Try adjusting your search or filter criteria</p>
            </div>
          )}
        </>
      )}

      {/* Route Detail Modal */}
      <RouteDetailModal
        route={selectedRoute}
        isOpen={showModal}
        onClose={() => setShowModal(false)}
        onUpdate={handleRouteUpdate}
        onDelete={(routeId) => {
          deleteRoute(routeId)
          setShowModal(false)
        }}
      />
    </div>
  )
}